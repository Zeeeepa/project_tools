"""
API handlers for {{ module_description }}.

This module provides API handlers for {{ module_description }}.
"""

from sqlalchemy.orm import Session
from typing import List, Optional, Dict, Any

from models.{{ module_name }} import {{ class_name }}
from schemas.{{ module_name }} import {{ class_name }}Schema


class {{ class_name }}Handler:
    """
    Handler for {{ module_description }}.
    """
    
    def __init__(self, db: Session):
        """
        Initialize a new {{ class_name }}Handler.
        
        Args:
            db: Database session
        """
        self.db = db
    
    def create(self, data: Dict[str, Any]) -> {{ class_name }}:
        """
        Create a new {{ module_name }}.
        
        Args:
            data: Data for the new {{ module_name }}
            
        Returns:
            Created {{ module_name }}
        """
        db_obj = {{ class_name }}(**data)
        self.db.add(db_obj)
        self.db.commit()
        self.db.refresh(db_obj)
        return db_obj
    
    def get(self, {{ module_name }}_id: int) -> Optional[{{ class_name }}]:
        """
        Get a {{ module_name }} by ID.
        
        Args:
            {{ module_name }}_id: ID of the {{ module_name }}
            
        Returns:
            {{ module_name }} or None if not found
        """
        return self.db.query({{ class_name }}).filter({{ class_name }}.id == {{ module_name }}_id).first()
    
    def get_all(self, skip: int = 0, limit: int = 100) -> List[{{ class_name }}]:
        """
        Get all {{ module_name }}s.
        
        Args:
            skip: Number of records to skip
            limit: Maximum number of records to return
            
        Returns:
            List of {{ module_name }}s
        """
        return self.db.query({{ class_name }}).offset(skip).limit(limit).all()
    
    def update(self, {{ module_name }}_id: int, data: Dict[str, Any]) -> Optional[{{ class_name }}]:
        """
        Update a {{ module_name }}.
        
        Args:
            {{ module_name }}_id: ID of the {{ module_name }}
            data: Data to update
            
        Returns:
            Updated {{ module_name }} or None if not found
        """
        db_obj = self.get({{ module_name }}_id)
        if db_obj is None:
            return None
            
        for key, value in data.items():
            setattr(db_obj, key, value)
            
        self.db.commit()
        self.db.refresh(db_obj)
        return db_obj
    
    def delete(self, {{ module_name }}_id: int) -> bool:
        """
        Delete a {{ module_name }}.
        
        Args:
            {{ module_name }}_id: ID of the {{ module_name }}
            
        Returns:
            True if deleted, False if not found
        """
        db_obj = self.get({{ module_name }}_id)
        if db_obj is None:
            return False
            
        self.db.delete(db_obj)
        self.db.commit()
        return True
